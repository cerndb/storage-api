variables:
  ### Disable cache in Docker builds, as this has occasionally resulted in images not containing what was
  ### expected multiple MRs where being built/retried.
  NO_CACHE: 'true'
  ### Replace RESOURCE with the name of the image you want to build and publish in OpenShift
  ### Important! In order for this template to work, the name of the gitlab repo must match
  ### also the variable name
  RESOURCE: storage-api
  ###
  ### You shouldn't change the following variables
  NAMESPACE: it-db-storage-api
  OPENSHIFT_SERVER: https://openshift-dev.cern.ch

stages:
 - test
 - build
 - provision
 - deploy

perform-tests:
  stage: test
  image: python:3
  before_script:
    - pip install -r requirements.txt
    - python setup.py install
  script:
    - make test

build-tag:
  stage: build
  only:
    - tags
  tags:
   - docker-image-build
  script: "echo building $CI_REGISTRY_IMAGE" # No empty scripts are allowed
  variables:
   TO: $CI_REGISTRY_IMAGE:${CI_BUILD_TAG} # Where to push resulting image

build-latest:
  stage: build
  only:
  - master
  tags:
  - docker-image-build
  script: "echo 'Building Docker image...'"

build-doc:
  image: python:3
  artifacts:
    paths:
      - html
    when: always
  stage: build
  before_script:
    - curl -sL https://deb.nodesource.com/setup_6.x | bash -
    - apt-get update && apt-get install -y nodejs
    - pip install -r requirements.txt
    - python setup.py install
    - npm install -g spectacle-docs
  script:
    - make html
    # - make doc_deploy

deploy-doc:
  stage: deploy
  only:
    - master
    - tags
  image: gitlab-registry.cern.ch/ci-tools/ci-web-deployer:latest
  script:
    - deploy-dfs


lint:
  image: python:3
  stage: test
  allow_failure: true
  before_script:
    - pip install flake8

  script:
    - make lint

## Ugly hack: tag whatever tagged image we built as :latest on
## OpenShift, causing it to (re)deploy that. Unfortunately, OpenShift
## does not speak versions, as far as I understand it.  Also, for good
## measure: actually import the image.
dev-deploy:
  when: manual
  only:
    - tags
  stage: deploy
  environment: dev
  image: gitlab-registry.cern.ch/paas-tools/openshift-client:latest
  script:
    - oc tag --token=${TOKEN} --server=${OPENSHIFT_SERVER} --namespace test-${NAMESPACE} --source=docker gitlab-registry.cern.ch/db/${RESOURCE}:${CI_BUILD_TAG:-latest} ${RESOURCE}:latest
  variables:
    TOKEN: ${SERVICE_ACCOUNT_TOKEN_DEV}
    GIT_STRATEGY: none

prod-deploy:
  when: manual
  only:
    - tags
  stage: deploy
  environment: prod
  image: gitlab-registry.cern.ch/paas-tools/openshift-client:latest
  script:
    - oc tag --token=${TOKEN} --server=${OPENSHIFT_SERVER} --namespace ${NAMESPACE} --source=docker gitlab-registry.cern.ch/db/${RESOURCE}:${CI_BUILD_TAG:-latest} ${RESOURCE}:latest
  variables:
    TOKEN: ${SERVICE_ACCOUNT_TOKEN_PROD}
    GIT_STRATEGY: none
    OPENSHIFT_SERVER: https://openshift.cern.ch

dev-template:
  stage: provision
  environment: dev
  only:
    - tags
    - master
  image: gitlab-registry.cern.ch/paas-tools/openshift-client:latest
  script:
    - oc replace template --token=${TOKEN} --server=${OPENSHIFT_SERVER} -n test-${NAMESPACE} -f storage-api-openshift-template.yaml
  variables:
    TOKEN: ${SERVICE_ACCOUNT_TOKEN_DEV}


prod-template:
  stage: provision
  environment: prod
  when: manual
  only:
    - tags
    - master
  image: gitlab-registry.cern.ch/paas-tools/openshift-client:latest
  script:
    - oc replace template --token=${TOKEN} --server=${OPENSHIFT_SERVER} -n ${NAMESPACE} -f storage-api-openshift-template.yaml
  variables:
    TOKEN: ${SERVICE_ACCOUNT_TOKEN_PROD}
    OPENSHIFT_SERVER: https://openshift.cern.ch
